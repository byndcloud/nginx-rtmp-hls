pid /run/nginx.pid;
user  root;
worker_processes  1;
    
error_log  logs/error.log debug;
         
events { }

rtmp {

    server {

        listen 1935;
        listen 443;

        ssl_certificate /etc/ssl/certs/nginx-selfsigned.crt;
        ssl_certificate_key /etc/ssl/private/nginx-selfsigned.key;

        chunk_size 4000;

        # TV mode: one publisher, many subscribers
        application mytv {

            # enable live streaming
            live on;

            # dash stream
            exec /bin/bash /script.sh $name;

            # hls stream
            #   exec_push /usr/bin/ffmpeg -i rtmp://localhost/mytv/$name \
            #   -b:a 64k -c:v libx264 -preset fast -profile:v baseline -vsync cfr -s 1280x720 -b:v 2500K -bufsize 2500k -f flv \
            #   -max_muxing_queue_size 1024 rtmp://localhost/dash/$name 2>> /var/log/ffmpeg-$name.log;


            # record first 1K of stream
            record all;
            record_path /tmp/av;
            record_max_size 1K;

            # append current timestamp to each flv
            record_unique on;

            # publish only from localhost
            allow publish all;

            #allow play all;
        }

        # Transcoding (ffmpeg needed)
        application big {
            live on;

            # On every pusblished stream run this command (ffmpeg)
            # with substitutions: $app/${app}, $name/${name} for application & stream name.
            #
            # This ffmpeg call receives stream from this application &
            # reduces the resolution down to 32x32. The stream is the published to
            # 'small' application (see below) under the same name.
            #
            # ffmpeg can do anything with the stream like video/audio
            # transcoding, resizing, altering container/codec params etc
            #
            # Multiple exec lines can be specified.

            exec ffmpeg -re -i rtmp://localhost:1935/$app/$name -vcodec flv -acodec copy -s 32x32
                        -f flv rtmp://localhost:1935/small/${name};

            #exec /usr/bin/ffmpeg -i rtmp://localhost/$app/$name \
            #    -c:a libfdk_aac -b:a 64k -c:v libx264 -preset fast -profile:v baseline -vsync cfr -s 1920x1080 -b:v 5000K -bufsize 5000k \
            #    -f flv rtmp://localhost/dash/$name_hi \

        }

        application small {
            live on;
            # Video with reduced resolution comes here from ffmpeg
        }

        application webcam {
            live on;

            # Stream from local webcam
            exec_static ffmpeg -f video4linux2 -i /dev/video0 -c:v libx264 -an
                               -f flv rtmp://localhost:1935/webcam/mystream;
        }

        # video on demand
        application vod {
            play /var/flvs;
        }

        application vod2 {
            play /var/mp4s;
        }

        # Many publishers, many subscribers
        # no checks, no recording
        application videochat {

            live on;

            # The following notifications receive all
            # the session variables as well as
            # particular call arguments in HTTP POST
            # request

            # Make HTTP request & use HTTP retcode
            # to decide whether to allow publishing
            # from this connection or not
            on_publish http://localhost:8080/publish;

            # Same with playing
            on_play http://localhost:8080/play;

            # Publish/play end (repeats on disconnect)
            on_done http://localhost:8080/done;

            # All above mentioned notifications receive
            # standard connect() arguments as well as
            # play/publish ones. If any arguments are sent
            # with GET-style syntax to play & publish
            # these are also included.
            # Example URL:
            #   rtmp://localhost/myapp/mystream?a=b&c=d

            # record 10 video keyframes (no audio) every 2 minutes
            record keyframes;
            record_path /tmp/vc;
            record_max_frames 10;
            record_interval 2m;

            # Async notify about an flv recorded
            on_record_done http://localhost:8080/record_done;

        }


        # HLS

        # For HLS to work please create a directory in tmpfs (/tmp/hls here)
        # for the fragments. The directory contents is served via HTTP (see
        # http{} section in config)
        #
        # Incoming stream must be in H264/AAC. For iPhones use baseline H264
        # profile (see ffmpeg example).
        # This example creates RTMP stream from movie ready for HLS:
        #
        # ffmpeg -loglevel verbose -re -i movie.avi  -vcodec libx264
        #    -vprofile baseline -acodec libmp3lame -ar 44100 -ac 1
        #    -f flv rtmp://localhost:1935/hls/movie
        #
        # If you need to transcode live stream use 'exec' feature.
        #
        application hls {
            live on;
            hls on;
            hls_path /tmp/hls;

            hls_variant _low BANDWIDTH=250000 RESOLUTION=320x180;
            hls_variant _med BANDWIDTH=500000 RESOLUTION=640x360;
            hls_variant _hi BANDWIDTH=1000000 RESOLUTION=1280x720;
        }

        # MPEG-DASH is similar to HLS

        application dash {
            live on;
            dash on;

            dash_nested on; 
            dash_repetition on;
            dash_path /tmp/dash;
            dash_fragment 5;
            dash_playlist_length 120; # keep 120s of tail
            dash_cleanup on;

            dash_variant _low bandwidth="500000" width="640" height="360";
            dash_variant _hi bandwidth="1000000" width="1280" height="720" max;
        }
    }
}

# HTTP can be used for accessing RTMP stats
http {

    server {

        listen      8080;

        # This URL provides RTMP statistics in XML
        location /stat {
            rtmp_stat all;

            # Use this stylesheet to view XML as web page
            # in browser
            add_header 'Access-Control-Allow-Origin' '*';
            rtmp_stat_stylesheet stat.xsl;
        }

        location /hls {
            # Serve HLS fragments
            types {
                application/vnd.apple.mpegurl m3u8;
                video/mp2t ts;
            }
            root /tmp;
            add_header 'Access-Control-Allow-Origin' '*';
            add_header Cache-Control no-cache;
        }

        location /dash {
            # Serve DASH fragments
            root /tmp;
            add_header 'Access-Control-Allow-Origin' '*';
            add_header Cache-Control no-cache;
        }
    }
}